{"version":3,"file":"index.d.ts","names":["InteropZodObject","InteropZodType","ResponseFormatUndefined","CreateAgentParams","AgentMiddleware","AnyAnnotationRoot","ExtractZodArrayTypes","ToolStrategy","TypedToolStrategy","ProviderStrategy","ResponseFormat","JsonSchemaFormat","ReactAgent","createAgent","Record","T","ContextSchema","TMiddleware","Omit","StructuredResponseFormat","JumpToTarget","Runtime","toolStrategy","providerStrategy","createMiddleware","ToolCallRequest","ToolCallHandler","ToolCallWrapper","FakeToolCallingModel"],"sources":["../../src/agents/index.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { InteropZodObject, InteropZodType } from \"@langchain/core/utils/types\";\nimport type { ResponseFormatUndefined } from \"./responses.js\";\nimport type { CreateAgentParams } from \"./types.js\";\nimport type { AgentMiddleware, AnyAnnotationRoot } from \"./middleware/types.js\";\nimport type { ExtractZodArrayTypes } from \"./types.js\";\nimport type { ToolStrategy, TypedToolStrategy, ProviderStrategy, ResponseFormat, JsonSchemaFormat } from \"./responses.js\";\nimport { ReactAgent } from \"./ReactAgent.js\";\n/**\n * Creates a production-ready ReAct (Reasoning + Acting) agent that combines language models with tools\n * and middleware to create systems that can reason about tasks, decide which tools to use, and iteratively\n * work towards solutions.\n *\n * The agent follows the ReAct pattern, interleaving reasoning steps with tool calls to iteratively\n * work towards solutions. It can handle multiple tool calls in sequence or parallel, maintain state\n * across interactions, and provide auditable decision processes.\n *\n * ## Core Components\n *\n * ### Model\n * The reasoning engine can be specified as:\n * - **String identifier**: `\"openai:gpt-4o\"` for simple setup\n * - **Model instance**: Configured model object for full control\n * - **Dynamic function**: Select models at runtime based on state\n *\n * ### Tools\n * Tools give agents the ability to take actions:\n * - Pass an array of tools created with the `tool` function\n * - Or provide a configured `ToolNode` for custom error handling\n *\n * ### Prompt\n * Shape how your agent approaches tasks:\n * - String for simple instructions\n * - SystemMessage for structured prompts\n * - Function for dynamic prompts based on state\n *\n * ### Middleware\n * Middleware allows you to extend the agent's behavior:\n * - Add pre/post-model processing for context injection or validation\n * - Add dynamic control flows, e.g. terminate invocation or retries\n * - Add human-in-the-loop capabilities\n * - Add tool calls to the agent\n * - Add tool results to the agent\n *\n * ## Advanced Features\n *\n * - **Structured Output**: Use `responseFormat` with a Zod schema to get typed responses\n * - **Memory**: Extend the state schema to remember information across interactions\n * - **Streaming**: Get real-time updates as the agent processes\n *\n * @param options - Configuration options for the agent\n * @param options.llm - The language model as an instance of a chat model\n * @param options.model - The language model as a string identifier, see more in {@link https://docs.langchain.com/oss/javascript/langchain/models#basic-usage | Models}.\n * @param options.tools - Array of tools or configured ToolNode\n * @param options.prompt - System instructions (string, SystemMessage, or function)\n * @param options.responseFormat - Zod schema for structured output\n * @param options.stateSchema - Custom state schema for memory\n * @param options.middleware - Array of middleware for extending agent behavior, see more in {@link https://docs.langchain.com/oss/javascript/langchain/middleware | Middleware}.\n *\n * @returns A ReactAgent instance with `invoke` and `stream` methods\n *\n * @example Basic agent with tools\n * ```ts\n * import { createAgent, tool } from \"langchain\";\n * import { z } from \"zod\";\n *\n * const search = tool(\n *   ({ query }) => `Results for: ${query}`,\n *   {\n *     name: \"search\",\n *     description: \"Search for information\",\n *     schema: z.object({\n *       query: z.string().describe(\"The search query\"),\n *     })\n *   }\n * );\n *\n * const agent = createAgent({\n *   llm: \"openai:gpt-4o\",\n *   tools: [search],\n * });\n *\n * const result = await agent.invoke({\n *   messages: [{ role: \"user\", content: \"Search for ReAct agents\" }],\n * });\n * ```\n *\n * @example Structured output\n * ```ts\n * import { createAgent } from \"langchain\";\n * import { z } from \"zod\";\n *\n * const ContactInfo = z.object({\n *   name: z.string(),\n *   email: z.string(),\n *   phone: z.string(),\n * });\n *\n * const agent = createAgent({\n *   llm: \"openai:gpt-4o\",\n *   tools: [],\n *   responseFormat: ContactInfo,\n * });\n *\n * const result = await agent.invoke({\n *   messages: [{\n *     role: \"user\",\n *     content: \"Extract: John Doe, john@example.com, (555) 123-4567\"\n *   }],\n * });\n *\n * console.log(result.structuredResponse);\n * // { name: 'John Doe', email: 'john@example.com', phone: '(555) 123-4567' }\n * ```\n *\n * @example Streaming responses\n * ```ts\n * const stream = await agent.stream(\n *   { messages: [{ role: \"user\", content: \"What's the weather?\" }] },\n *   { streamMode: \"values\" }\n * );\n *\n * for await (const chunk of stream) {\n *   // ...\n * }\n * ```\n */\n// Overload 1: With responseFormat as single InteropZodType\nexport declare function createAgent<T extends Record<string, any> = Record<string, any>, ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<T, ContextSchema, InteropZodType<T>> & {\n    responseFormat: InteropZodType<T>;\n    middleware?: TMiddleware;\n}): ReactAgent<T, ContextSchema, TMiddleware>;\n// Overload 2: With responseFormat as array of InteropZodTypes (infers union type)\nexport declare function createAgent<T extends readonly InteropZodType<any>[], ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<ExtractZodArrayTypes<T> extends Record<string, any> ? ExtractZodArrayTypes<T> : Record<string, any>, ContextSchema, T> & {\n    responseFormat: T;\n    middleware?: TMiddleware;\n}): ReactAgent<ExtractZodArrayTypes<T> extends Record<string, any> ? ExtractZodArrayTypes<T> : Record<string, any>, ContextSchema, TMiddleware>;\n// Overload 3: With responseFormat as JsonSchemaFormat (JSON schema object)\nexport declare function createAgent<ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<Record<string, unknown>, ContextSchema, JsonSchemaFormat> & {\n    responseFormat: JsonSchemaFormat;\n    middleware?: TMiddleware;\n}): ReactAgent<Record<string, unknown>, ContextSchema, TMiddleware>;\n// Overload 4: With responseFormat as array of JsonSchemaFormat (JSON schema objects)\nexport declare function createAgent<ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<Record<string, unknown>, ContextSchema, JsonSchemaFormat[]> & {\n    responseFormat: JsonSchemaFormat[];\n    middleware?: TMiddleware;\n}): ReactAgent<Record<string, unknown>, ContextSchema, TMiddleware>;\n// Overload 4.5: With responseFormat as union of JsonSchemaFormat | JsonSchemaFormat[]\nexport declare function createAgent<ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<Record<string, unknown>, ContextSchema, JsonSchemaFormat | JsonSchemaFormat[]> & {\n    responseFormat: JsonSchemaFormat | JsonSchemaFormat[];\n    middleware?: TMiddleware;\n}): ReactAgent<Record<string, unknown>, ContextSchema, TMiddleware>;\n// Overload 5: With responseFormat as TypedToolStrategy (for union types from toolStrategy)\nexport declare function createAgent<T extends Record<string, any> = Record<string, any>, ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<T, ContextSchema, TypedToolStrategy<T>> & {\n    responseFormat: TypedToolStrategy<T>;\n    middleware?: TMiddleware;\n}): ReactAgent<T, ContextSchema, TMiddleware>;\n// Overload 6: With responseFormat as single ToolStrategy instance\nexport declare function createAgent<T extends Record<string, any> = Record<string, any>, ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<T, ContextSchema, ToolStrategy<T>> & {\n    responseFormat: ToolStrategy<T>;\n    middleware?: TMiddleware;\n}): ReactAgent<T, ContextSchema, TMiddleware>;\n// Overload 7: With responseFormat as ProviderStrategy\nexport declare function createAgent<T extends Record<string, any> = Record<string, any>, ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<T, ContextSchema, ProviderStrategy<T>> & {\n    responseFormat: ProviderStrategy<T>;\n    middleware?: TMiddleware;\n}): ReactAgent<T, ContextSchema, TMiddleware>;\n// Overload 8: Without responseFormat property at all - with proper middleware state typing\nexport declare function createAgent<ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: Omit<CreateAgentParams<ResponseFormatUndefined, ContextSchema, never>, \"responseFormat\"> & {\n    middleware?: TMiddleware;\n}): ReactAgent<ResponseFormatUndefined, ContextSchema, TMiddleware>;\n// Overload 9: With responseFormat explicitly undefined\nexport declare function createAgent<ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: Omit<CreateAgentParams<ResponseFormatUndefined, ContextSchema, never>, \"responseFormat\"> & {\n    responseFormat?: undefined;\n    middleware?: TMiddleware;\n}): ReactAgent<ResponseFormatUndefined, ContextSchema, TMiddleware>;\n// Overload 10: For other ResponseFormat values (failsafe)\nexport declare function createAgent<StructuredResponseFormat extends Record<string, any> = Record<string, any>, ContextSchema extends AnyAnnotationRoot | InteropZodObject = AnyAnnotationRoot, TMiddleware extends readonly AgentMiddleware[] = readonly AgentMiddleware[]>(params: CreateAgentParams<StructuredResponseFormat, ContextSchema, ResponseFormat> & {\n    responseFormat: ResponseFormat;\n    middleware?: TMiddleware;\n}): ReactAgent<StructuredResponseFormat, ContextSchema, TMiddleware>;\n// Re-export types and utilities\nexport * from \"./types.js\";\nexport * from \"./errors.js\";\nexport type { JumpToTarget } from \"./constants.js\";\nexport type { Runtime } from \"./runtime.js\";\nexport { toolStrategy, providerStrategy, ToolStrategy, ProviderStrategy, type ResponseFormat, type ResponseFormatUndefined, } from \"./responses.js\";\nexport { createMiddleware } from \"./middleware.js\";\nexport type { ToolCallRequest, ToolCallHandler, ToolCallWrapper, } from \"./middleware/types.js\";\nexport { FakeToolCallingModel } from \"./tests/utils.js\";\nexport type { ReactAgent } from \"./ReactAgent.js\";\n"],"mappings":"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"}