{"version":3,"file":"middleware.d.ts","names":["InteropZodObject","InteropZodDefault","InteropZodOptional","InferInteropZodInput","InferInteropZodOutput","AIMessage","ToolMessage","Command","JumpToTarget","ClientTool","ServerTool","Runtime","AgentBuiltInState","AgentMiddleware","MiddlewareResult","ToolCallRequest","ToolCallHandler","ModelRequest","createMiddleware","TSchema","TContextSchema","Partial","Promise"],"sources":["../../src/agents/middleware.d.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { InteropZodObject, InteropZodDefault, InteropZodOptional, InferInteropZodInput, InferInteropZodOutput } from \"@langchain/core/utils/types\";\nimport type { AIMessage, ToolMessage } from \"@langchain/core/messages\";\nimport type { Command } from \"@langchain/langgraph\";\nimport type { JumpToTarget } from \"./constants.js\";\nimport type { ClientTool, ServerTool } from \"./tools.js\";\nimport type { Runtime, AgentBuiltInState } from \"./runtime.js\";\nimport type { AgentMiddleware, MiddlewareResult, ToolCallRequest, ToolCallHandler } from \"./middleware/types.js\";\nimport type { ModelRequest } from \"./nodes/types.js\";\n/**\n * Creates a middleware instance with automatic schema inference.\n *\n * @param config - Middleware configuration\n * @param config.name - The name of the middleware\n * @param config.stateSchema - The schema of the middleware state\n * @param config.contextSchema - The schema of the middleware context\n * @param config.wrapModelCall - The function to wrap model invocation\n * @param config.wrapToolCall - The function to wrap tool invocation\n * @param config.beforeModel - The function to run before the model call\n * @param config.afterModel - The function to run after the model call\n * @param config.beforeAgent - The function to run before the agent execution starts\n * @param config.afterAgent - The function to run after the agent execution completes\n * @returns A middleware instance\n *\n * @example\n * ```ts\n * const authMiddleware = createMiddleware({\n *   name: \"AuthMiddleware\",\n *   stateSchema: z.object({\n *     isAuthenticated: z.boolean().default(false),\n *   }),\n *   contextSchema: z.object({\n *     userId: z.string(),\n *   }),\n *   beforeModel: async (state, runtime, controls) => {\n *     if (!state.isAuthenticated) {\n *       return controls.terminate(new Error(\"Not authenticated\"));\n *     }\n *   },\n * });\n * ```\n */\nexport declare function createMiddleware<TSchema extends InteropZodObject | undefined = undefined, TContextSchema extends InteropZodObject | InteropZodOptional<InteropZodObject> | InteropZodDefault<InteropZodObject> | undefined = undefined>(config: {\n    /**\n     * The name of the middleware\n     */\n    name: string;\n    /**\n     * The schema of the middleware state. Middleware state is persisted between multiple invocations. It can be either:\n     * - A Zod object\n     * - A Zod optional object\n     * - A Zod default object\n     * - Undefined\n     */\n    stateSchema?: TSchema;\n    /**\n     * The schema of the middleware context. Middleware context is read-only and not persisted between multiple invocations. It can be either:\n     * - A Zod object\n     * - A Zod optional object\n     * - A Zod default object\n     * - Undefined\n     */\n    contextSchema?: TContextSchema;\n    /**\n     * Explitictly defines which targets are allowed to be jumped to from the `beforeAgent` hook.\n     */\n    beforeAgentJumpTo?: JumpToTarget[];\n    /**\n     * Explitictly defines which targets are allowed to be jumped to from the `beforeModel` hook.\n     */\n    beforeModelJumpTo?: JumpToTarget[];\n    /**\n     * Explitictly defines which targets are allowed to be jumped to from the `afterModel` hook.\n     */\n    afterModelJumpTo?: JumpToTarget[];\n    /**\n     * Explitictly defines which targets are allowed to be jumped to from the `afterAgent` hook.\n     */\n    afterAgentJumpTo?: JumpToTarget[];\n    /**\n     * Additional tools registered by the middleware.\n     */\n    tools?: (ClientTool | ServerTool)[];\n    /**\n     * Wraps tool execution with custom logic. This allows you to:\n     * - Modify tool call parameters before execution\n     * - Handle errors and retry with different parameters\n     * - Post-process tool results\n     * - Implement caching, logging, authentication, or other cross-cutting concerns\n     * - Return Command objects for advanced control flow\n     *\n     * The handler receives a ToolCallRequest containing the tool call, state, and runtime,\n     * along with a handler function to execute the actual tool.\n     *\n     * @param request - The tool call request containing toolCall, state, and runtime.\n     * @param handler - The function that executes the tool. Call this with a ToolCall to get the result.\n     * @returns The tool result as a ToolMessage or a Command for advanced control flow.\n     *\n     * @example\n     * ```ts\n     * wrapToolCall: async (request, handler) => {\n     *   console.log(`Calling tool: ${request.tool.name}`);\n     *   console.log(`Tool description: ${request.tool.description}`);\n     *\n     *   try {\n     *     // Execute the tool\n     *     const result = await handler(request.toolCall);\n     *     console.log(`Tool ${request.tool.name} succeeded`);\n     *     return result;\n     *   } catch (error) {\n     *     console.error(`Tool ${request.tool.name} failed:`, error);\n     *     // Could return a custom error message or retry\n     *     throw error;\n     *   }\n     * }\n     * ```\n     *\n     * @example Authentication\n     * ```ts\n     * wrapToolCall: async (request, handler) => {\n     *   // Check if user is authorized for this tool\n     *   if (!request.runtime.context.isAuthorized(request.tool.name)) {\n     *     return new ToolMessage({\n     *       content: \"Unauthorized to call this tool\",\n     *       tool_call_id: request.toolCall.id,\n     *     });\n     *   }\n     *   return handler(request.toolCall);\n     * }\n     * ```\n     */\n    wrapToolCall?: (request: ToolCallRequest<(TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>, handler: ToolCallHandler) => Promise<ToolMessage | Command> | ToolMessage | Command;\n    /**\n     * Wraps the model invocation with custom logic. This allows you to:\n     * - Modify the request before calling the model\n     * - Handle errors and retry with different parameters\n     * - Post-process the response\n     * - Implement custom caching, logging, or other cross-cutting concerns\n     *\n     * The request parameter contains: model, messages, systemPrompt, tools, state, and runtime.\n     *\n     * @param request - The model request containing all the parameters needed.\n     * @param handler - The function that invokes the model. Call this with a ModelRequest to get the response.\n     * @returns The response from the model (or a modified version).\n     *\n     * @example\n     * ```ts\n     * wrapModelCall: async (request, handler) => {\n     *   // Modify request before calling\n     *   const modifiedRequest = { ...request, systemPrompt: \"You are helpful\" };\n     *\n     *   try {\n     *     // Call the model\n     *     return await handler(modifiedRequest);\n     *   } catch (error) {\n     *     // Handle errors and retry with fallback\n     *     const fallbackRequest = { ...request, model: fallbackModel };\n     *     return await handler(fallbackRequest);\n     *   }\n     * }\n     * ```\n     */\n    wrapModelCall?: (request: ModelRequest<(TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>, handler: (request: ModelRequest<(TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>) => Promise<AIMessage> | AIMessage) => Promise<AIMessage> | AIMessage;\n    /**\n     * The function to run before the agent execution starts. This function is called once at the start of the agent invocation.\n     * It allows to modify the state of the agent before any model calls or tool executions.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    beforeAgent?: (state: (TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, runtime: Runtime<TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>) => Promise<MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>> | MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>;\n    /**\n     * The function to run before the model call. This function is called before the model is invoked and before the `wrapModelCall` hook.\n     * It allows to modify the state of the agent.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    beforeModel?: (state: (TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, runtime: Runtime<TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>) => Promise<MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>> | MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>;\n    /**\n     * The function to run after the model call. This function is called after the model is invoked and before any tools are called.\n     * It allows to modify the state of the agent after the model is invoked, e.g. to update tool call parameters.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    afterModel?: (state: (TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, runtime: Runtime<TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>) => Promise<MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>> | MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>;\n    /**\n     * The function to run after the agent execution completes. This function is called once at the end of the agent invocation.\n     * It allows to modify the final state of the agent after all model calls and tool executions are complete.\n     *\n     * @param state - The middleware state\n     * @param runtime - The middleware runtime\n     * @returns The modified middleware state or undefined to pass through\n     */\n    afterAgent?: (state: (TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}) & AgentBuiltInState, runtime: Runtime<TContextSchema extends InteropZodObject ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodDefault<any> ? InferInteropZodOutput<TContextSchema> : TContextSchema extends InteropZodOptional<any> ? Partial<InferInteropZodOutput<TContextSchema>> : never>) => Promise<MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>> | MiddlewareResult<Partial<TSchema extends InteropZodObject ? InferInteropZodInput<TSchema> : {}>>;\n}): AgentMiddleware<TSchema, TContextSchema, any>;\n"],"mappings":"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"}