{"version":3,"file":"chat_models.d.ts","names":["ZodType","ZodTypeV3","$ZodType","ZodTypeV4","BaseMessage","BaseMessageChunk","BaseMessageLike","AIMessageChunk","BasePromptValueInterface","LLMResult","ChatGenerationChunk","ChatResult","Generation","BaseLanguageModel","StructuredOutputMethodOptions","ToolDefinition","BaseLanguageModelCallOptions","BaseLanguageModelInput","BaseLanguageModelParams","CallbackManagerForLLMRun","Callbacks","RunnableConfig","BaseCache","StructuredToolInterface","StructuredToolParams","Runnable","RunnableToolLike","ToolChoice","Record","SerializedChatModel","SerializedLLM","BaseChatModelParams","BaseChatModelCallOptions","LangSmithParams","Array","BindToolsInput","BaseChatModel","OutputMessageType","CallOptions","Exclude","Omit","Partial","Promise","AsyncGenerator","messages","cache","llmStringKey","parsedOptions","handledOptions","RunOutput","SimpleChatModel"],"sources":["../../src/language_models/chat_models.d.ts"],"sourcesContent":["import type { ZodType as ZodTypeV3 } from \"zod/v3\";\nimport type { $ZodType as ZodTypeV4 } from \"zod/v4/core\";\nimport { type BaseMessage, BaseMessageChunk, type BaseMessageLike, AIMessageChunk } from \"../messages/index.js\";\nimport type { BasePromptValueInterface } from \"../prompt_values.js\";\nimport { LLMResult, ChatGenerationChunk, type ChatResult, type Generation } from \"../outputs.js\";\nimport { BaseLanguageModel, type StructuredOutputMethodOptions, type ToolDefinition, type BaseLanguageModelCallOptions, type BaseLanguageModelInput, type BaseLanguageModelParams } from \"./base.js\";\nimport { type CallbackManagerForLLMRun, type Callbacks } from \"../callbacks/manager.js\";\nimport type { RunnableConfig } from \"../runnables/config.js\";\nimport type { BaseCache } from \"../caches/base.js\";\nimport { StructuredToolInterface, StructuredToolParams } from \"../tools/index.js\";\nimport { Runnable, RunnableToolLike } from \"../runnables/base.js\";\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ToolChoice = string | Record<string, any> | \"auto\" | \"any\";\n/**\n * Represents a serialized chat model.\n */\nexport type SerializedChatModel = {\n    _model: string;\n    _type: string;\n} & Record<string, any>;\n// todo?\n/**\n * Represents a serialized large language model.\n */\nexport type SerializedLLM = {\n    _model: string;\n    _type: string;\n} & Record<string, any>;\n/**\n * Represents the parameters for a base chat model.\n */\nexport type BaseChatModelParams = BaseLanguageModelParams & {\n    /**\n     * Whether to disable streaming.\n     *\n     * If streaming is bypassed, then `stream()` will defer to\n     * `invoke()`.\n     *\n     * - If true, will always bypass streaming case.\n     * - If false (default), will always use streaming case if available.\n     */\n    disableStreaming?: boolean;\n    /**\n     * Version of `AIMessage` output format to store in message content.\n     *\n     * `AIMessage.contentBlocks` will lazily parse the contents of `content` into a\n     * standard format. This flag can be used to additionally store the standard format\n     * as the message content, e.g., for serialization purposes.\n     *\n     * - \"v0\": provider-specific format in content (can lazily parse with `.contentBlocks`)\n     * - \"v1\": standardized format in content (consistent with `.contentBlocks`)\n     *\n     * You can also set `LC_OUTPUT_VERSION` as an environment variable to \"v1\" to\n     * enable this by default.\n     *\n     * @default \"v0\"\n     */\n    outputVersion?: \"v0\" | \"v1\";\n};\n/**\n * Represents the call options for a base chat model.\n */\nexport type BaseChatModelCallOptions = BaseLanguageModelCallOptions & {\n    /**\n     * Specifies how the chat model should use tools.\n     * @default undefined\n     *\n     * Possible values:\n     * - \"auto\": The model may choose to use any of the provided tools, or none.\n     * - \"any\": The model must use one of the provided tools.\n     * - \"none\": The model must not use any tools.\n     * - A string (not \"auto\", \"any\", or \"none\"): The name of a specific tool the model must use.\n     * - An object: A custom schema specifying tool choice parameters. Specific to the provider.\n     *\n     * Note: Not all providers support tool_choice. An error will be thrown\n     * if used with an unsupported model.\n     */\n    tool_choice?: ToolChoice;\n};\nexport type LangSmithParams = {\n    ls_provider?: string;\n    ls_model_name?: string;\n    ls_model_type: \"chat\";\n    ls_temperature?: number;\n    ls_max_tokens?: number;\n    ls_stop?: Array<string>;\n};\nexport type BindToolsInput = StructuredToolInterface\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n | Record<string, any> | ToolDefinition | RunnableToolLike | StructuredToolParams;\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */\nexport declare abstract class BaseChatModel<CallOptions extends BaseChatModelCallOptions = BaseChatModelCallOptions, \n// TODO: Fix the parameter order on the next minor version.\nOutputMessageType extends BaseMessageChunk = AIMessageChunk> extends BaseLanguageModel<OutputMessageType, CallOptions> {\n    // Backwards compatibility since fields have been moved to RunnableConfig\n    ParsedCallOptions: Omit<CallOptions, Exclude<keyof RunnableConfig, \"signal\" | \"timeout\" | \"maxConcurrency\">>;\n    // Only ever instantiated in main LangChain\n    lc_namespace: string[];\n    disableStreaming: boolean;\n    outputVersion?: \"v0\" | \"v1\";\n    constructor(fields: BaseChatModelParams);\n    _combineLLMOutput?(...llmOutputs: LLMResult[\"llmOutput\"][]): LLMResult[\"llmOutput\"];\n    protected _separateRunnableConfigFromCallOptionsCompat(options?: Partial<CallOptions>): [RunnableConfig, this[\"ParsedCallOptions\"]];\n    /**\n     * Bind tool-like objects to this chat model.\n     *\n     * @param tools A list of tool definitions to bind to this chat model.\n     * Can be a structured tool, an OpenAI formatted tool, or an object\n     * matching the provider's specific tool schema.\n     * @param kwargs Any additional parameters to bind.\n     */\n    bindTools?(tools: BindToolsInput[], kwargs?: Partial<CallOptions>): Runnable<BaseLanguageModelInput, OutputMessageType, CallOptions>;\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */\n    invoke(input: BaseLanguageModelInput, options?: CallOptions): Promise<OutputMessageType>;\n    // eslint-disable-next-line require-yield\n    _streamResponseChunks(_messages: BaseMessage[], _options: this[\"ParsedCallOptions\"], _runManager?: CallbackManagerForLLMRun): AsyncGenerator<ChatGenerationChunk>;\n    _streamIterator(input: BaseLanguageModelInput, options?: CallOptions): AsyncGenerator<OutputMessageType>;\n    getLsParams(options: this[\"ParsedCallOptions\"]): LangSmithParams;\n    /** @ignore */\n    _generateUncached(messages: BaseMessageLike[][], parsedOptions: this[\"ParsedCallOptions\"], handledOptions: RunnableConfig, startedRunManagers?: CallbackManagerForLLMRun[]): Promise<LLMResult>;\n    _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions }: {\n        messages: BaseMessageLike[][];\n        cache: BaseCache<Generation[]>;\n        llmStringKey: string;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parsedOptions: any;\n        handledOptions: RunnableConfig;\n    }): Promise<LLMResult & {\n        missingPromptIndices: number[];\n        startedRunManagers?: CallbackManagerForLLMRun[];\n    }>;\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */\n    generate(messages: BaseMessageLike[][], options?: string[] | CallOptions, callbacks?: Callbacks): Promise<LLMResult>;\n    /**\n     * Get the parameters used to invoke the model\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options?: this[\"ParsedCallOptions\"]): any;\n    _modelType(): string;\n    abstract _llmType(): string;\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */\n    generatePrompt(promptValues: BasePromptValueInterface[], options?: string[] | CallOptions, callbacks?: Callbacks): Promise<LLMResult>;\n    abstract _generate(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<ChatResult>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV4<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<false>): Runnable<BaseLanguageModelInput, RunOutput>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV4<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<true>): Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV3<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<false>): Runnable<BaseLanguageModelInput, RunOutput>;\n    withStructuredOutput<\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RunOutput extends Record<string, any> = Record<string, any>>(outputSchema: ZodTypeV3<RunOutput>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     | Record<string, any>, config?: StructuredOutputMethodOptions<true>): Runnable<BaseLanguageModelInput, {\n        raw: BaseMessage;\n        parsed: RunOutput;\n    }>;\n}\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */\nexport declare abstract class SimpleChatModel<CallOptions extends BaseChatModelCallOptions = BaseChatModelCallOptions> extends BaseChatModel<CallOptions> {\n    abstract _call(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<string>;\n    _generate(messages: BaseMessage[], options: this[\"ParsedCallOptions\"], runManager?: CallbackManagerForLLMRun): Promise<ChatResult>;\n}\n"],"mappings":"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"}